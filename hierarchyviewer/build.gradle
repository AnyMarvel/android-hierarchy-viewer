apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'android-maven'
apply plugin: 'signing'

group = 'com.polidea'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    signingConfigs {
        hierarchyViewerConfig {
            storeFile file("${rootDir}/dev_tools/hierarchy_viewer.keystore")
            storePassword project.hasProperty('storePass') ? project['storePass'] : ''
            keyAlias project.hasProperty('alias') ? project['alias'] : ''
            keyPassword project.hasProperty('keyPass') ? project['keyPass'] : ''
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig android.signingConfigs.hierarchyViewerConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

// Set up for Sonatype OSS repository
def isReleaseVersion = !version.endsWith('SNAPSHOT')

def siteUrl = 'https://github.com/Polidea/android-hierarchy-viewer'      // Homepage URL of the library
def gitUrl = 'https://github.com/Polidea/android-hierarchy-viewer.git'   // Git repository URL

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask(':uploadArchives') }

    sign configurations.archives
}

def uploadUsername = project.hasProperty('userName') ? project['userName'] : ''
def uploadPassword = project.hasProperty('userPass') ? project['userPass'] : ''

def artifactId = 'hierarchyviewer'

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment ->
            if (isReleaseVersion) {
                signing.signPom(deployment)
            }
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: uploadUsername, password: uploadPassword)
        }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: uploadUsername, password: uploadPassword)
        }

        pom.artifactId = artifactId

        pom.project {
            name 'android-hierarchy-viewer'
            packaging 'jar'
            description 'Hierarchy Viewer is a library which allows to display views tree of your application in the simple way on your Gooogle Chrome browser.'
            url 'https://github.com/Polidea/android-hierarchy-viewer'

            scm {
                url 'scm:git@github.com:Polidea/android-hierarchy-viewer.git'
                connection 'scm:git@github.com:Polidea/android-hierarchy-viewer.git'
                developerConnection 'scm:git@github.com:Polidea/android-hierarchy-viewer.git'
            }

            licenses {
                license {
                    name 'The MIT License (MIT)'
                    url 'https://github.com/Polidea/android-hierarchy-viewer/blob/master/LICENSE'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'Polidea-Dev'
                    email 'it@polidea.com'
                    name 'Polidea'
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    def buildWebappTask = tasks.create(name: "buildWebappFor${variant.name.capitalize()}", type: Exec) {
        onlyIf {
            project.properties["buildWebapp"]
        }
        description "Builds webapp content with grunt"
        doFirst {
            println '''
               ______                 __
              / ____/______  ______  / /_
             / / __/ ___/ / / / __ \\/ __/
            / /_/ / /  / /_/ / / / / /_
            \\____/_/   \\__,_/_/ /_/\\__/

            '''
        }
        doLast {
            println '''
              ________      ____  ____
             /_  __/ /   _ / __ \\/ __ \\
              / / / /   (_) / / / /_/ /
             / / / /____ / /_/ / _, _/    Grunt is done.
            /_/ /_____( )_____/_/ |_|
                      |/
            '''
        }
        workingDir rootDir
        commandLine "grunt", "build"
    }

    project.tasks["process${variant.name.capitalize()}Resources"].dependsOn buildWebappTask
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.nanohttpd:nanohttpd:2.1.1'
    compile 'org.immutables:gson:1.1.3'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
}
